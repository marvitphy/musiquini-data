function empty(rows, cols) {
  let matrix = new Array(rows);
  for (let i = 0; i < rows; i++) {
    matrix[i] = new Array(cols);
  }
  return matrix;
}

function arange(start, end, step) {
  if (step) {
    let result = new Array((end - start) / step);
    for (let i = 0; i < result.length; i++) {
      result[i] = start + i * step;
    }
    return result;
  } else if (end) {
    let result = new Array(end - start);
    for (let i = 0; i < result.length; i++) {
      result[i] = i + start;
    }
    return result;
  } else {
    let result = new Array(start);
    for (let i = 0; i < start; i++) {
      result[i] = i;
    }
    return result;
  }
}

function ones_like(matrix) {
  if (matrix.constructor == Array) {
    if (matrix[0].constructor == Array) {
      let result = empty(matrix.length, matrix[0].length);
      for (let i = 0; i < matrix.length; i++) {
        for (let j = 0; j < matrix[i].length; j++) {
          result[i][j] = 1;
        }
      }
      return result;
    } else {
      let result = new Array(matrix.length);
      for (let i = 0; i < matrix.length; i++) {
        result[i] = 1;
      }
      return result;
    }
  }
}

function zeros(rows, cols) {
  if (!cols) {
    let arr = new Array(rows);
    for (let i = 0; i < arr.length; i++) {
      arr[i] = 0;
    }
    return arr;
  } else {
    let matrix = empty(rows, cols);
    for (let i = 0; i < matrix.length; i++) {
      for (let j = 0; j < matrix[i].length; j++) {
        matrix[i][j] = 0;
      }
    }
    return matrix;
  }
}

function add(mA, mB) {
  let result = empty(mA.length, mA[0].length);

  for (let i = 0; i < result.length; i++) {
    for (let j = 0; j < result[i].length; j++) {
      result[i][j] = mA[i][j] + mB[i][j];
    }
  }
  return result;
}

function multiply(a, b) {
  if (a.cols != b.rows) {
    console.log("Columns must match rows");
    return undefined;
  }
  let result = empty(a.length, b[0].length);

  for (let i = 0; i < result.length; i++) {
    for (let j = 0; j < result[i].length; j++) {
      let sum = 0;
      for (let k = 0; k < a[i].length; k++) {
        sum += a[i][k] * b[k][j];
      }
      result[i][j] = sum;
    }
  }
  return result;
}

function subtract(mA, mB) {
  let result = empty(mA.length, mA[0].length);

  for (let i = 0; i < result.length; i++) {
    for (let j = 0; j < result[i].length; j++) {
      result[i][j] = mA[i][j] - mB[i][j];
    }
  }
  return result;
}

function hasNaN(matrix) {
  if (matrix.constructor != Array) return;
  if (matrix[0].constructor == Array) {
    for (let i = 0; i < matrix.length; i++) {
      for (let j = 0; j < matrix.length; j++) {
        if (isNaN(matrix[i][j])) {
          console.log(true);
        }
      }
    }
    console.log(false);
  } else {
    for (let i = 0; i < matrix.length; i++) {
      if (isNaN(matrix[i])) {
        console.log(true);
      }
    }
    console.log(false);
  }
}

function info(matrix) {
  if (matrix[0].constructor == Array) {
    console.log(matrix.length + " x " + matrix[0].length);
  } else {
    console.log(matrix.length);
  }
}

function table(matrix) {
  console.table(matrix);
}

function rand(rows, cols) {
  let arr = empty(rows, cols);

  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      arr[i][j] = Math.random() * 2;
    }
  }
  return arr;
}

function transpose(matrix) {
  if (matrix[0].constructor == Array) {
    let result = empty(matrix[0].length, matrix.length);

    for (let i = 0; i < matrix.length; i++) {
      for (let j = 0; j < matrix[i].length; j++) {
        result[j][i] = matrix[i][j];
      }
    }
    return result;
  } else {
    console.log("\x1b[31m%s\x1b[0m", "ERROR: Cannot transpose 1D array");
  }
}

function dleakyrelu(x) {
  return x >= 0 ? 1 : 0.01;
}
function dsigmoid(y) {
  return y * (1 - y);
}
function dtanh(y) {
  return 1 - y * y;
}
function heaviside(n) {
  return +(n >= 0);
}
function leakyrelu(x) {
  return x >= 0 ? x : 0.01 * x;
}
function relu(x) {
  return Math.max(0, x);
}
function sigmoid(x) {
  return 1 / (1 + Math.exp(-x));
}

function sigma(inputs) {
  let sum = 0;
  for (let i = 0; i < inputs.length; i++) {
    sum += Math.exp(inputs[i]);
  }
  return sum;
}

function softmax(inputs) {
  let sum = sigma(inputs);
  let outputs = empty(inputs.length, inputs[0].length);
  for (let i = 0; i < outputs.length; i++) {
    for (let j = 0; j < outputs[i].length; j++) {
      outputs[i][j] = Math.exp(inputs[i][j]) / sum;
    }
  }
  return outputs;
}
function tanh(x) {
  return (Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x));
}
let np = {
  zeros: zeros,
  ones_like: ones_like,
  arange: arange,
  random: {
    rand: rand,
  },
  matmul: multiply,
  transpose: transpose,
  sigmoid: sigmoid,
  dsigmoid: dsigmoid,
  softmax: softmax,
  tanh: tanh,
  dtanh: dtanh,
  relu: relu,
  heaviside: heaviside,
  leakyrelu: leakyrelu,
  dleakyrelu: dleakyrelu,
  subtract: subtract,
  add: add,
};

Object.defineProperty(Array.prototype, "randomize", {
  value: function (range1 = 0, range2 = 1) {
    for (var i = 0; i < this.length; i++) {
      for (var j = 0; j < this[i].length; j++) {
        this[i][j] = Math.random() * (range2 - range1) + range1;
      }
    }
  },
});

Object.defineProperty(Array.prototype, "reshape", {
  value: function reshape(rows, cols) {
    if (this[0].constructor == Array) {
      let size = this.length * this[0].length;
      if (size % rows == 0 && size % cols == 0 && size / rows == cols) {
        let oned = empty(size, 1);
        let counter = 0;
        for (let i = 0; i < this.length; i++) {
          for (let j = 0; j < this[0].length; j++) {
            oned[counter] = this[i][j];
            counter++;
          }
        }
        let result = empty(rows, cols);
        counter = 0;
        for (let i = 0; i < rows; i++) {
          for (let j = 0; j < cols; j++) {
            result[i][j] = oned[counter];
            counter++;
          }
        }
        return result;
      }
    } else {
      console.log("\x1b[31m%s\x1b[0m", "ERROR: Cannot reshape 1D array");
    }
  },
});

Object.defineProperty(Array.prototype, "map", {
  value: function (func) {
    if (this[0].constructor == Array) {
      for (var i = 0; i < this.length; i++) {
        for (var j = 0; j < this[i].length; j++) {
          let val = this[i][j];
          this[i][j] = func(val);
        }
      }
    } else if (this.constructor == Array && this[0].constructor == Number) {
      for (let i = 0; i < this.length; i++) {
        let val = this[i];
        this[i] = func(val);
      }
    } else {
      console.log("\x1b[31m%s\x1b[0m", "ERROR: Did not receive 1D or 2D array");
    }
  },
});

Object.defineProperty(Array.prototype, "multiply", {
  value: function (m2) {
    if (m2.constructor == Number) {
      for (var i = 0; i < this.length; i++) {
        for (var j = 0; j < this[i].length; j++) {
          this[i][j] *= m2;
        }
      }
    } else {
      for (var i = 0; i < this.length; i++) {
        for (var j = 0; j < this[i].length; j++) {
          this[i][j] *= m2[i][j];
        }
      }
    }
  },
});

Object.defineProperty(Array.prototype, "info", {
  value: function () {
    info(this);
  },
});

Object.defineProperty(Array.prototype, "table", {
  value: function () {
    table(this);
  },
});

Object.defineProperty(Array.prototype, "hasNaN", {
  value: function () {
    hasNaN(this);
  },
});
